package com.infonapalm.ridbackend.Utils

import java.awt.Polygon

import org.opengts.util.{GeoPoint, GeoPolygon}

/**
 * Created with IntelliJ IDEA.
 * Date: 9/29/15
 * Time: 3:09 PM

 */
case class Point(lat: Double,lng: Double,alt: Double)

object Geo {
  /**
   * the length of one degree of latitude (and one degree of longitude at equator) in meters.
   */
  val DEGREE_DISTANCE_AT_EQUATOR = 111329;
  /**
   * the radius of the earth in meters.
   */
  val EARTH_RADIUS = 6378137; //meters
  /**
   * the length of one minute of latitude in meters, i.e. one nautical mile in meters.
   */
  val MINUTES_TO_METERS = 1852d;
  /**
   * the amount of minutes in one degree.
   */
  val DEGREE_TO_MINUTES = 60d;

  val POLYGON = "47.0925656,38.2324219,0.0 47.1317887,38.4183106,0.0 47.1569246,38.5908661,0.0 47.1835179,38.7827227,0.0 47.1904131,38.838302,0.0 47.188132,38.874745,0.0 47.1932122,38.8810565,0.0 47.2027535,38.8777555,0.0 47.2057682,38.8720994,0.0 47.2124678,38.8521667,0.0 47.2221695,38.851503,0.0 47.2281683,38.87408,0.0 47.2360024,38.8756297,0.0 47.2399109,38.8860177,0.0 47.2426933,38.8907087,0.0 47.2436688,38.8930113,0.0 47.2447312,38.8947988,0.0 47.252028,38.8972241,0.0 47.2546784,38.9038119,0.0 47.2601824,38.9154621,0.0 47.2653664,38.9274245,0.0 47.2681039,38.9368341,0.0 47.2757019,38.9708305,0.0 47.2779653,38.9838228,0.0 47.2774136,38.9970597,0.0 47.2766715,39.0088803,0.0 47.2774856,39.0151431,0.0 47.2815316,39.0234782,0.0 47.2822583,39.0276723,0.0 47.2814364,39.0402494,0.0 47.2816029,39.0534701,0.0 47.2860298,39.0713978,0.0 47.2905703,39.0901014,0.0 47.2920422,39.1066795,0.0 47.2903829,39.1218201,0.0 47.2887196,39.1533852,0.0 47.2882837,39.1775367,0.0 47.2828315,39.2184217,0.0 47.2732041,39.2599412,0.0 47.2626309,39.2996835,0.0 47.237287,39.5231437,0.0 47.2382323,39.5323841,0.0 47.2408086,39.5409384,0.0 47.2453471,39.5516111,0.0 47.2452758,39.6019418,0.0 47.2455112,39.6238909,0.0 47.2470257,39.6364113,0.0 47.2475492,39.6558855,0.0 47.2538958,39.6722754,0.0 47.2618425,39.6686743,0.0 47.2636871,39.6586744,0.0 47.2685387,39.658534,0.0 47.2713513,39.6724708,0.0 47.2771223,39.6721068,0.0 47.3006984,39.6463612,0.0 47.3156225,39.6264917,0.0 47.3462386,39.6102077,0.0 47.3473669,39.6201946,0.0 47.3462071,39.6325435,0.0 47.345506,39.6431736,0.0 47.3484582,39.6873079,0.0 47.3494826,39.7879285,0.0 47.3297891,39.8271159,0.0 47.277948,39.9189949,0.0 47.325404,40.0361993,0.0 47.4006731,40.1306534,0.0 47.4223606,40.1430385,0.0 47.4414798,40.2079787,0.0 47.4892208,40.264125,0.0 47.6202046,40.3185575,0.0 47.6835922,40.2906418,0.0 47.6938088,40.3006098,0.0 47.7092822,40.3014827,0.0 47.7216962,40.2727411,0.0 47.7518296,40.2626116,0.0 47.7507872,40.2235006,0.0 47.7695924,40.2231756,0.0 47.8145775,40.2067043,0.0 47.8547326,40.2348977,0.0 47.8982846,40.1542743,0.0 47.9548751,40.1797888,0.0 48.0530366,40.1939867,0.0 48.1569251,40.2848053,0.0 48.2545788,40.3587891,0.0 48.2988069,40.3988363,0.0 48.3423308,40.4046249,0.0 48.4846469,40.3931338,0.0 48.6546937,40.3944547,0.0 48.804414,40.4310758,0.0 48.878583,40.4646312,0.0 48.9342286,40.4969787,0.0 48.9592569,40.4698563,0.0 49.0207597,40.3603363,0.0 49.0698175,39.9771881,0.0 49.0522702,39.6695709,0.0 48.9400922,39.657898,0.0 48.881163,39.7835742,0.0 48.8131942,39.7018432,0.0 48.7661358,39.682592,0.0 48.7344553,39.6372988,0.0 48.8294696,39.4731903,0.0 48.8620045,39.3070221,0.0 48.8172636,39.0763092,0.0 48.7869616,38.9506531,0.0 48.7775255,38.8243037,0.0 48.7656942,38.7020874,0.0 48.7724826,38.4741211,0.0 48.6882407,38.2317352,0.0 48.5829669,38.1005859,0.0 48.5220621,38.0950928,0.0 48.448333,37.9563904,0.0 48.3808929,37.8797224,0.0 48.3402714,37.8703206,0.0 48.3014667,37.8547668,0.0 48.2348625,37.820223,0.0 48.1917597,37.7806779,0.0 48.1955898,37.7190546,0.0 48.1774145,37.6574486,0.0 48.0750295,37.5814804,0.0 47.9981929,37.4441528,0.0 47.9554443,37.4043273,0.0 47.8316868,37.4193773,0.0 47.8149309,37.467792,0.0 47.7982509,37.4624625,0.0 47.7806483,37.4585093,0.0 47.7125337,37.3562622,0.0 47.6033853,37.5498962,0.0 47.410897,37.744217,0.0 47.1673097,37.7105713,0.0 47.13252,37.7239609,0.0 47.0867217,37.7541733,0.0 47.0846178,37.7651596,0.0 47.0832151,37.7816391,0.0 47.0808773,37.7960587,0.0 47.087423,37.8242111,0.0 47.1012132,37.8557968,0.0 47.1044849,37.8801727,0.0 47.1082238,37.8983688,0.0 47.0958378,37.9340744,0.0 47.0818124,37.9828262,0.0 47.0911631,37.9969025,0.0 47.0920981,38.0085754,0.0 47.0860204,38.0319214,0.0 47.0913968,38.044281,0.0 47.1070554,38.0611038,0.0 47.1019143,38.0875397,0.0 47.0745646,38.110199,0.0 47.0567914,38.1163788,0.0 46.8876973,37.7721481,0.0 46.7823172,37.677708,0.0 46.6553278,37.7002716,0.0 46.6029141,37.7442612,0.0 46.5816215,37.8210509,0.0 46.5796846,37.8793713,0.0 46.5890316,37.9679781,0.0 46.6250848,38.1177442,0.0 46.646878,38.1548499,0.0 46.6790383,38.1672559,0.0 47.0001583,38.0998993,0.0 47.0239202,38.1194568,0.0 47.0495401,38.152771,0.0 47.0925656,38.2324219,0.0"

  val POLYGON_JAVA = new GeoPolygon()

  POLYGON.split(" ").foreach(point => {
    point.split(",") match {
      case Array(lat,lng,alt) => POLYGON_JAVA.addGeoPoint(new GeoPoint(lat.toDouble,lng.toDouble))
    }
  })

  def pointInsidePolygon(lat: Double, lng: Double): Boolean = POLYGON_JAVA.containsPoint(new GeoPoint(lat,lng))

  def getCirclePoints(centerLat: Double, centerLon: Double, distance: Int): (Double,Double) = {
    val crs = Math.toRadians(0)
    val d12 = Math.toRadians(distance / MINUTES_TO_METERS / DEGREE_TO_MINUTES)

    val lat1 = Math.toRadians(centerLat)
    val lon1 = Math.toRadians(centerLon)

    val lat = Math.asin(Math.sin(lat1) * Math.cos(d12)
      + Math.cos(lat1) * Math.sin(d12) * Math.cos(crs))
    val dlon = Math.atan2(Math.sin(crs) * Math.sin(d12) * Math.cos(lat1),
      Math.cos(d12) - Math.sin(lat1) * Math.sin(lat))
    val lon = (lon1 + dlon + Math.PI) % (2 * Math.PI) - Math.PI

    return (Math.toDegrees(lat), Math.toDegrees(lon))
  }
}
